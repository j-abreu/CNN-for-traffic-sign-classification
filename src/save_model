#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Nov 29 14:31:38 2019

@author: jeremiah
"""
#%%
from keras.models import Sequential
from keras.layers import Conv2D, MaxPool2D, Dropout, Dense, Flatten
import tensorflow as tf
import pathlib
#%%
def build_cnn_model(n_classes = 18, input_shape = (64, 64, 3), filter_size = 3, gray_scale = False, drop_prob = 0.2):
    
    model = Sequential()
    
    model.add(Conv2D(32, (filter_size, filter_size), input_shape=input_shape,
                     activation="relu", padding="same"))
    model.add(Dropout(drop_prob))
    
    model.add(Conv2D(32, (filter_size, filter_size), input_shape=input_shape,
                     activation="relu", padding="same"))
    model.add(Dropout(drop_prob))
    model.add(MaxPool2D(pool_size=(2,2)))
    
    model.add(Conv2D(64, (filter_size, filter_size), input_shape=input_shape,
                     activation="relu", padding="same"))
    model.add(Dropout(drop_prob))
    model.add(MaxPool2D(pool_size=(2,2)))
    
    model.add(Conv2D(128, (filter_size, filter_size), input_shape=input_shape,
                     activation="relu", padding="same"))
    model.add(Dropout(drop_prob))
    model.add(MaxPool2D(pool_size=(2,2)))
    
    model.add(Flatten())
    model.add(Dropout(drop_prob))
    model.add(Dense(512, activation="relu"))
    model.add(Dropout(drop_prob))
    model.add(Dense(256, activation="relu"))
    model.add(Dropout(drop_prob))
    model.add(Dense(n_classes, activation="softmax"))
    
    return model

model = build_cnn_model()

model.compile(optimizer="adam", loss="categorical_crossentropy", metrics=["accuracy"])

model.load_weights("/media/jeremiah/7E9BF5A34D96B6A4/2019.4/PE3/CNN-for-traffic-sign-classification/trained_models/weights.hdf5")

#%%

export_dir = "/tmp/saved_model"

tf.saved_model.save(model, export_dir)

#%%
tf.lite.TFLiteConverter.from_saved_model()



#%%
x = [-1, 0, 1, 2, 3, 4]
y = [-3, -1, 1, 3, 4, 7]

model = tf.keras.models.Sequential([tf.keras.layers.Dense(units=1, input_shape=[1])])
model.compile(optimizer='sgd', loss='mean_squared_error')
model.fit(x, y, epochs=500)

#%%
export_dir = "/media/jeremiah/7E9BF5A34D96B6A4/2019.4/PE3/CNN-for-traffic-sign-classification/tflite/saved_model"
tf.saved_model.save(model, export_dir)

i = []
i.append(-1)
i.append(0)

r = model(i[0])





























